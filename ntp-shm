#!/usr/bin/perl

# part of this code is from: https://github.com/doug1/psip-time/blob/master/psip-time.pl
# This module is free software. You can redistribute it and/or
# modify it under the terms of the Artistic License 2.0.
#
# This program is distributed in the hope that it will be useful,
# but without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose.
#
# on Fedora, this needs the packages perl-Inline, perl-DateTime, and gcc
#
# example /etc/ntp.conf:
# server 127.127.28.0 minpoll 4 maxpoll 4
# fudge 127.127.28.0 time1 0.000 refid GPS stratum 0
#
# to run this program:
# ./ntp-shm </dev/gps0
# Adjust /dev/gps0 to match your device (see dmesg - can be "ttyUSB0").
# This program needs to run as root (shm permissions and realtime priority)

use strict;
use IPC::SysV qw(IPC_PRIVATE IPC_RMID S_IRUSR S_IWUSR);
use Inline "C";
use DateTime;
use Time::HiRes qw(tv_interval);
use constant {
  NTP_SHMID => 0x4e545030
};
use POSIX qw(:termios_h);
require "asm-generic/termbits.ph";

set_rr(32);

our($locktype,%satinfo,%time,$lastsat,$last_remote_time,$last_local_time);
our $shmid = shmget(NTP_SHMID, 96, S_IRUSR | S_IWUSR);
die "shmget: $!" if ( $shmid < 0 );

open(LOG,">>ntp-shm.log");

set_serial_speed(fileno(STDIN));

sub set_serial_speed {
  my($fileno) = @_;

  my $termios = POSIX::Termios->new;
  $termios->getattr($fileno);

  $termios->setospeed(B115200());
  $termios->setispeed(B115200());

  $termios->setattr($fileno, POSIX::TCSANOW());
}

# send the local vs remote time offset to ntp
sub ntp_message {
  my($local,$remote) = @_;

  my $remote_us = $remote->hires_epoch() - $remote->epoch();
  $remote_us = int($remote_us * 1000000);
  my $remote_s = $remote->epoch();

  my $nsamples = 0;
  my $valid = 1;
  my $precision = -13; # 2^-13 = 122 microseconds ~ 125us
  my $leap = 0;
  my $count = 0;
  my $mode = 0;

  my $format = "ll". "ql" . "l" . "ql" . "llll" . "l" . "llllllllll";
  my $message = pack( $format, 
		  $mode, $count,
                  $remote_s, $remote_us,
		  0,
                  $local->[0], $local->[1],
                  $leap,
		  $precision, $nsamples, $valid,
                  0,0,0,0,0,0,0,0,0,0,0);

  my $len = length($message);
  die "wrong message length" unless($len == 96);
  shmwrite($shmid, $message, 0, $len) || die("$!");
}

my($reference_time);
sub watch_zzaac {
  my($start,$end,$found) = @_;

  if($reference_time and $last_remote_time and $last_local_time) {
    if($start < $reference_time->{navspark_oxco_last}) {
      $reference_time->{navspark_wraps}++;
    }
    $reference_time->{navspark_oxco_last} = $start;
    my $time_after_wrap = $start + $reference_time->{navspark_wraps} * 2**30/81.84;
    my $duration_navspark = ($time_after_wrap - $reference_time->{navspark_oxco}) / 1000000;
    my $duration_gps = $last_remote_time->hires_epoch() - $reference_time->{gps};
    my $duration_pc = tv_interval($reference_time->{pc}, $last_local_time);

    my $diff_navspark = $duration_gps-$duration_navspark;
    my $diff_pc = $duration_gps-$duration_pc;
    printf("times: GPS=%0.6f NS=%0.6f(%0.3f) PC=%0.6f(%0.3f)\n", $duration_gps, $diff_navspark, $diff_navspark/$duration_gps*1000000, $diff_pc, $diff_pc/$duration_gps*1000000);
    printf LOG ("T %d %0.6f %0.6f %0.3f %0.6f %0.3f %d %d\n", $last_local_time->[0], $duration_gps, $diff_navspark, $diff_navspark/$duration_gps*1000000, $diff_pc, $diff_pc/$duration_gps*1000000, $start, $end);

    $last_remote_time = $last_local_time = undef;
  } elsif(defined($last_remote_time) and defined($last_local_time)) {
    $reference_time = {
      navspark_oxco => $start,
      navspark_oxco_last => $start,
      navspark_wraps => 0,
      gps => $last_remote_time->hires_epoch(),
      pc => $last_local_time
    };
  } else {
    print LOG "NT $start $end\n";
  }
}

# parse GPS lock type (none, 2D, 3D) and satellite signal strength info
sub parse_nmea {
  my($line) = @_;

  if($line =~ /^\$G.GSA,.,([0-3])/) { # GPGSA - GPS, GNGSA - GPS+Glonass, GLGSA - Glonass
    $locktype = $1;
  } elsif($line =~ /^\$G.GSV,[0-9]+,[0-9]+,[0-9]+,(.*)\*[0-9A-F]{2}/) { # GPGSV - GPS, GLGSV - Glonass
    if($lastsat != time()) {
      %satinfo = ();
      $lastsat = time();
    }
    my(@sats) = split(/,/,$1);
    for(my $i = 0; $i < @sats; $i += 4) {
      $satinfo{$sats[$i]} = {
          id => $sats[$i],
          elev => $sats[$i+1],
          azmu => $sats[$i+2],
          snr => $sats[$i+3]
      };
    }
  } elsif($line =~ /^\$G.ZDA,(.*)\*[0-9A-F]{2}/) {
    print LOG $line."\n";
    foreach my $sat (keys %satinfo) {
      print LOG "sat $sat=".$satinfo{$sat}{snr}." ";
    }
    print LOG "\n";
    # $GNZDA,020718.000,29,07,2014,00,00*4F
    my(@time) = split(/,/,$1);
    $time{stamp} = time();
    $time{day} = $time[1];
    $time{month} = $time[2];
    $time{year} = $time[3];
    if($time[0] =~ /^([0-9]{2})([0-9]{2})([0-9]{2})\./) {
      $time{hour} = $1;
      $time{minute} = $2;
      $time{second} = $3;
    }
    $locktype = undef;
  } elsif($line =~ /^\$ZZAAC start=(\d+) end=(\d+) found=(\d+)/) {
    my($start,$end,$found) = ($1,$2,$3);
    watch_zzaac($start,$end,$found);
  } elsif($line =~ /\$REBOOTED/) {
    print LOG $line."\n";
    $reference_time = undef;
  } elsif($line =~ /ERROR/) {
    print LOG $line."\n";
  }
}

sub TS_matches_ZDA {
  my($ts_seconds,$zda) = @_;

  if(time() - $zda->{stamp} > 2) { # ZDA timestamp was old
    print "ignoring ".(time() - $zda->{stamp})." s old timestamp\n";
    print LOG "IGNORE ".(time() - $zda->{stamp})." s old timestamp\n";
    return 0;
  } elsif($zda->{second} != $ts_seconds) { # ZDA timestamp seconds do not match TS timestamp seconds
    print LOG "TS/ZDA\n";
    print "warning: TS $ts_seconds s != ZDA ".$zda->{second}."s\n";
    return 0;
  }
#  print "TS $ts_seconds == ZDA ",$zda->{second}," (".(time()-$zda->{stamp})." ago)\n";
  return 1;
}

my($local_timestamp,$line);
while(my($data,$ts_s,$ts_us) = timeread(fileno(STDIN))) {
  if(defined($ts_s)) { # we found the start of a "TS" string, keep the timestamp and start buffering
    $local_timestamp = [$ts_s, $ts_us];
    $line = $data;
  } elsif($local_timestamp) {
    $line .= $data; # buffer till we get the whole "TS" string
    if($line =~ /^TS([0-9]{4})-([0-9]{2})-([0-9]{2}) @ ([0-9]{2}):([0-9]{2}):([0-9]{2})\(\+0\.([0-9]{7})\) ([AP])M\*[0-9A-F]{2}\r\n(.*)/) {
      my($remote_year,$remote_month,$remote_day,$remote_hour,$remote_minute,$remote_second,$remote_sub_s,$remote_ampm,$newline) = ($1,$2,$3,$4,$5,$6,$7,$8,$9);
      print LOG $line;
      if($remote_ampm eq "P") {
        $remote_hour += 12;
      }
      $remote_sub_s += 860; # add 86us for 10 bits at 115200 baud

      my $thisline = $line;
      $thisline =~ s/\r\n.*//s;
      $line = $newline;
      $last_local_time = $local_timestamp;

      if(TS_matches_ZDA($remote_second,\%time)) {
        my $remote = DateTime->new(
            year => $remote_year,
            month => $remote_month,
            day => $remote_day,
            hour => $remote_hour,
            minute => $remote_minute,
            second => $remote_second,
            nanosecond => ($remote_sub_s * 100),
            time_zone => "UTC"
            );
        printf("%0.6f %s\n", $remote->hires_epoch() - ($local_timestamp->[0] + $local_timestamp->[1] / 1000000), $thisline);
        printf LOG ("%0.6f %0.6f\n", $remote->hires_epoch(),$local_timestamp->[0] + $local_timestamp->[1] / 1000000);
        ntp_message($local_timestamp, $remote);
        $last_remote_time = $remote;
      } else {
        $last_remote_time = undef;
      }
      $local_timestamp = undef;
    } elsif($line =~ /^TS\*[0-9A-F]{2}\r\n(.*)/) { # we had a "TS" string, but the GPS has no lock
      $line = $1;
      $last_local_time = $local_timestamp;

      print "TS - no sync sats[";
      print LOG "TS - no sync sats[";
      foreach my $sat (keys %satinfo) {
        if($satinfo{$sat}{snr} > 25) {
          print "$sat ";
          print LOG "$sat ";
        }
      }
      print "]\n";
      print LOG "]\n";
      $local_timestamp = $last_remote_time = undef;
    }
  } else {
    $line .= $data;
    if($line =~ /^(.*?)\r\n(.*)/s) { # we found a full line
      my $nmea = $1;
      if(length($nmea)) {
        parse_nmea($nmea);
      }
      $line = $2;
    }
  }
}

__END__
__C__
#include <sched.h>
#include <unistd.h>
#include <sys/time.h>
#include <string.h>

int set_rr(int priority) {
  struct sched_param param;

  param.sched_priority = priority;
  return sched_setscheduler(0, SCHED_RR, &param); // set realtime priority (as far as realtime goes on a general OS)
}

// returns: either array (buffer) or array (buffer, seconds, useconds)
//  second return type is for the timestamp of the '$' character in the line "$TS..."
void timeread(int fd) {
  char buf[512];
  int status;
  struct timeval now;
  static int found_newline = 0;
  static struct timeval last_dollar;
  Inline_Stack_Vars;

  ssize_t len = read(fd, buf, sizeof(buf));
  gettimeofday(&now,NULL);
  if(len <= 0) { // error or device gone, return an empty list
    Inline_Stack_Reset;
    Inline_Stack_Done;
    return;
  }

  Inline_Stack_Reset;
  Inline_Stack_Push(sv_2mortal(newSVpvn(buf, len)));

  if(found_newline) {
    if(len == 1 && buf[0] == '$' && found_newline == 1) { // only got one character '$', so we know the timestamp error is bounded at 8ms
      found_newline = 2;
      last_dollar.tv_sec = now.tv_sec;
      last_dollar.tv_usec = now.tv_usec;
    } else {
      if(buf[0] == 'T' && found_newline == 2) { // the line is "$T" so far, it's the timestamp line so return the timestamp of the '$' character
	Inline_Stack_Push(sv_2mortal(newSViv(last_dollar.tv_sec)));
	Inline_Stack_Push(sv_2mortal(newSViv(last_dollar.tv_usec)));
      }
      found_newline = 0;
    }
  }

  char *newline = strchr(buf, '\n');
  if(newline != NULL && newline == (buf+len-1)) {
    found_newline = 1; // last character of the buffer was a '\n'? start looking for the '$'
  }

  Inline_Stack_Done;
}
